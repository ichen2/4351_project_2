package Parse;

action code {: static Symbol.Symbol sym(String s) {
	         return Symbol.Symbol.symbol(s);
	        }
	    :};

parser code  {: 
  Lexer lexer;

  public void syntax_error(java_cup.runtime.Symbol current) {
   report_error("Syntax error (" + current.sym + ")", current);
  }

  ErrorMsg.ErrorMsg errorMsg;

  public void report_error(String message, java_cup.runtime.Symbol info) {
      errorMsg.error(info.left, message);
  }

  public Grm(Lexer l, ErrorMsg.ErrorMsg err) {
    this();
    errorMsg=err;
    lexer=l;
  }
:};

scan with {: return lexer.nextToken(); :};

terminal String ID, STRING;
terminal Integer INT;
terminal COMMA, COLON, SEMICOLON, LPAREN, RPAREN, LBRACK, RBRACK, 
	LBRACE, RBRACE, DOT, PLUS, MINUS, TIMES, DIVIDE, EQ, NEQ, LT, LE, 
	GT, GE, AND, OR, ASSIGN, ARRAY, IF, THEN, ELSE, WHILE, FOR, TO,
	DO, LET, IN, END, OF, BREAK, NIL, FUNCTION, VAR, TYPE;

non terminal Absyn.Exp          Exp;
non terminal Absyn.Var          Var;
non terminal Absyn.ArrayTy      ArrayTy;
non terminal Absyn.AssignExp    AssignExp;
non terminal Absyn.ArrayExp	ArrayExp;
non terminal Absyn.CallExp      CallExp;
non terminal Absyn.Dec          Dec;
non terminal Absyn.DecList      DecList;
non terminal Absyn.ExpList      ExpList;
non terminal Absyn.FieldExpList      FieldExpList;
non terminal Absyn.FieldList    FieldList;
non terminal Absyn.FieldVar     FieldVar;
non terminal Absyn.ForExp       ForExp;
non terminal Absyn.FunctionDec  FunctionDec;
non terminal Absyn.IfExp		IfExp;
non terminal Absyn.LetExp		LetExp;
non terminal Absyn.NameTy       NameTy;
non terminal Absyn.NilExp       NilExp;
non terminal Absyn.OpExp        OpExp;
non terminal Absyn.RecordExp    RecordExp;
non terminal Absyn.RecordTy     RecordTy;
non terminal Absyn.SeqExp		SeqExp;
non terminal Absyn.Ty           Ty;
non terminal Absyn.TypeDec      TypeDec;
non terminal Absyn.VarDec       VarDec;
non terminal Absyn.VarExp       VarExp;
non terminal Absyn.SubscriptVar	SubscriptVar;
non terminal Absyn.WhileExp     WhileExp;


//extra helper methods
non terminal Absyn.NameTy       OptionalTypeDec;
non terminal Absyn.ExpList	    Sequence;
non terminal Absyn.ExpList 		SeqTail;
non terminal Absyn.Exp  		ElsePart;
non terminal Absyn.FunctionDec	optFunctions;
non terminal Absyn.FieldList    optFieldList;
non terminal Absyn.FieldExpList 	OptFieldExps;
non terminal Absyn.TypeDec 			optTypes;
non terminal Absyn.ExpList	    Arguments;
non terminal Absyn.ExpList	    OptArguments;





precedence nonassoc THEN;
precedence nonassoc ELSE;
precedence nonassoc ASSIGN;
precedence left OR;
precedence left AND;
precedence nonassoc EQ, NEQ, LT, LE, GT, GE;
precedence left PLUS, MINUS;
precedence left TIMES, DIVIDE;

start with Exp;

Exp ::= error:e                                    //if it is an easy one line of code, I will put it in here, if it is more complicated I will created a method for it and then call it
	  	{: RESULT = new Absyn.SeqExp(eleft, null); :}
	| Var:v
	  	{: RESULT = new Absyn.VarExp(vleft, v); :}
	| STRING:s
		{: RESULT = new Absyn.StringExp(sleft, s); :}
	| INT:i
		{: RESULT = new Absyn.IntExp(ileft, i); :}
	| BREAK:b
		{: RESULT = new Absyn.BreakExp(bleft); :}
	| IfExp:ie                                        //when handling If, there are two IfExp functions.  One has the else as null and one has the else clause
		{: RESULT = ie; :}

	| OpExp:oe
		{: RESULT = oe; :}

	| LPAREN SeqExp:se RPAREN
		{: RESULT = se; :}

	| WhileExp:we
		{: RESULT = we; :}

	| LetExp:le
		{: RESULT = le; :}

	| CallExp:ce 
		{: RESULT = ce; :}

	| NIL:n
		{: RESULT = new Absyn.NilExp(nleft); :}

	| AssignExp:ae
		{: RESULT = ae; :}

	| ForExp:fe
		{: RESULT = fe; :}

	| ArrayExp:ae
		{: RESULT = ae; :}

	| RecordExp:re
		{: RESULT = re; :}
	;


IfExp ::= IF:i Exp:e THEN Exp:e2 ElsePart:ep                                                
		{: RESULT = new Absyn.IfExp(ileft, e, e2, ep); :}
	| Exp:le AND Exp:re               //left expression and right expression
		{: RESULT = new Absyn.IfExp(leleft, le, re, new Absyn.IntExp(leleft, 0)); :}
	| Exp:le OR Exp:re
		{: RESULT = new Absyn.IfExp(leleft, le, new Absyn.IntExp(leleft, 1), re); :}
	;

ElsePart ::= 
	| ELSE Exp:e
		{: RESULT = e; :}
	;


OpExp ::= Exp:le GT Exp:re         //left expression GT right expression
		{: RESULT = new Absyn.OpExp(leleft, le, Absyn.OpExp.GT, re); :}
	| Exp:le PLUS Exp:re
		{: RESULT = new Absyn.OpExp(leleft, le, Absyn.OpExp.PLUS, re); :}
	| MINUS:m Exp:e                                                                                        //when a number is negative
		{: RESULT = new Absyn.OpExp(mleft, new Absyn.IntExp(mleft, 0), Absyn.OpExp.MINUS, e); :}
	| Exp:le MINUS Exp:re
		{: RESULT = new Absyn.OpExp(leleft, le, Absyn.OpExp.MINUS, re); :}
	| Exp:le TIMES Exp:re
		{: RESULT = new Absyn.OpExp(leleft, le, Absyn.OpExp.MUL, re); :}
	| Exp:le DIVIDE Exp:re
		{: RESULT = new Absyn.OpExp(leleft, le, Absyn.OpExp.DIV, re); :}
	| Exp:le LE Exp:re
		{: RESULT = new Absyn.OpExp(leleft, le, Absyn.OpExp.LE, re); :}
	| Exp:le GE Exp:re
		{: RESULT = new Absyn.OpExp(leleft, le, Absyn.OpExp.GE, re); :}
	| Exp:le LT Exp:re
		{: RESULT = new Absyn.OpExp(leleft, le, Absyn.OpExp.LT, re); :}
	| Exp:le EQ Exp:re
		{: RESULT = new Absyn.OpExp(leleft, le, Absyn.OpExp.EQ, re); :}
	| Exp:le NEQ Exp:re
		{: RESULT = new Absyn.OpExp(leleft, le, Absyn.OpExp.NE, re); :}
	;

SeqExp ::= SeqExp:e
		{: RESULT = e; :}
	|ExpList:el
		{: RESULT = new Absyn.SeqExp(elleft, el); :}
	;

ExpList ::=                                                          
	| Exp: e 
          {: RESULT = new Absyn.ExpList(e, null); :}
	| Sequence:seq
	  {: RESULT = seq; :}
	;

Sequence ::=                                                       
        Exp: e SEMICOLON SeqTail:s
        {: RESULT = new Absyn.ExpList(e,s); :}
        ;

SeqTail ::=                                                          
        Exp:e
        	{: RESULT = new Absyn.ExpList(e,null); :}
        | Sequence: seq
        	{: RESULT = seq; :}
        ;

WhileExp ::= WHILE:w Exp:test DO Exp:body
			{: RESULT = new Absyn.WhileExp(wleft, test, body); :}
		;

LetExp ::= LET:l DecList:dl IN SeqExp:se END
			{: RESULT = new Absyn.LetExp(lleft, dl, se); :}
		;

CallExp ::= ID:id LPAREN Arguments:args RPAREN
		{: RESULT = new Absyn.CallExp(idleft, sym(id), args); :}
	;

Arguments ::=                                                     
	| Exp:e OptArguments:args
		{: RESULT = new Absyn.ExpList(e, args); :}
	;

OptArguments ::=                                                   
	error
	|
	| COMMA Exp:e OptArguments:args
		{: RESULT = new Absyn.ExpList(e, args); :}
	;

AssignExp ::= Var:v ASSIGN Exp:e
		{: RESULT = new Absyn.AssignExp(vleft, v, e); :}
	;

ForExp ::= FOR:f ID:n ASSIGN Exp:e TO Exp:hi DO Exp:body
		{: RESULT = new Absyn.ForExp(fleft, new Absyn.VarDec(nleft, sym(n), null, e), hi, body); :}
	;//

ArrayExp ::= ID:id LBRACK Exp:size RBRACK OF Exp:ini
		{: RESULT = new Absyn.ArrayExp(idleft, sym(id), size, ini); :}
	;

RecordExp ::= ID:id LBRACE FieldExpList:fel RBRACE
		{: RESULT = new Absyn.RecordExp(idleft, sym(id), fel); :}
	;//

FieldExpList ::=
	|ID:n EQ:eq Exp:e OptFieldExps: fld
		{: RESULT = new Absyn.FieldExpList(eqleft, sym(n), e, fld); :}
	;

OptFieldExps ::=                                                                             
	error
	|
	| COMMA:com ID:n Exp:e OptFieldExps:fld
		{: RESULT = new Absyn.FieldExpList(comleft, sym(n), e, fld); :}
	;


Var ::=   ID:n
	  {: RESULT = new Absyn.SimpleVar(nleft, sym(n)); :}
	| FieldVar:flVar
	  {: RESULT = flVar; :}
	| SubscriptVar:sub
	  {: RESULT = sub; :}
	;

SubscriptVar ::= 
	ID:n LBRACK:lbrack Exp:e RBRACK
        {: RESULT = new Absyn.SubscriptVar(lbrackleft, new Absyn.SimpleVar(nleft,sym(n)),e); :}
	| FieldVar:fl LBRACK:lbrack Exp:e RBRACK
	{: RESULT = new Absyn.SubscriptVar(lbrackleft,fl,e); :}
	| SubscriptVar:sub LBRACK:lbrack Exp:e RBRACK
	{: RESULT = new Absyn.SubscriptVar(lbrackleft,sub,e); :}
	;

FieldVar ::=
	Var:vr DOT:s ID:n
		{: RESULT = new Absyn.FieldVar(sleft,vr,sym(n)); :}
	;

DecList ::=
	Dec:d
	{: RESULT = new Absyn.DecList(d,null); :}
	|Dec:d DecList:ds
	{: RESULT = new Absyn.DecList(d,ds); :}
	;

Dec ::=
	error
	|FunctionDec:fd
	{: RESULT = fd; :}
	|VarDec:vd
	{: RESULT = vd; :}
	| TypeDec:t
	{: RESULT = t; :}
	;

VarDec ::= VAR:v ID:id OptionalTypeDec:otd ASSIGN Exp:e
	{: RESULT = new Absyn.VarDec(vleft, sym(id), otd, e); :}
	;



OptionalTypeDec ::= NameTy:nt
			{:RESULT = nt; :}
		| 
	;

FunctionDec ::=
	FUNCTION:fu ID:n LPAREN FieldList:fld RPAREN OptionalTypeDec:otd EQ Exp:e optFunctions:f                     
		{: RESULT = new Absyn.FunctionDec(fuleft,sym(n),fld,otd,e,f); :}
	;

optFunctions ::=                                        
	| FunctionDec:fundec
		{: RESULT = fundec; :}
	;



TypeDec ::=
	TYPE:ty1 ID:n EQ:eq Ty:ty2 optTypes:ty3
	{: RESULT = new Absyn.TypeDec(ty1left,sym(n), ty2, ty3); :}
	;

optTypes ::=                                               
	| TypeDec:t
		{: RESULT = t; :}
	;

Ty ::= ID:n                                                                        //not sure why calling absyn.Ty doesnt work
		{: RESULT = new Absyn.NameTy(nleft, sym(n)); :}
	| RecordTy:rt
		{: RESULT = rt; :}
	| ArrayTy:at
		{: RESULT = at; :}
	;

ArrayTy ::= ARRAY:a OF ID:id
			{: RESULT = new Absyn.ArrayTy(aleft, sym(id)); :}
	;

RecordTy ::= LBRACE:lb FieldList:fl RBRACE
			{: RESULT = new Absyn.RecordTy(lbleft, fl); :}
	;

optFieldList ::=                                                           
	error
	|
	| COMMA:com ID:n1 COLON ID:n2 optFieldList:fld
		{: RESULT = new Absyn.FieldList(comleft, sym(n1), sym(n2), fld); :}
	;



FieldList ::=
	error
	|
	| ID:n1 COLON:col ID:n2 optFieldList:fld
		{: RESULT = new Absyn.FieldList(colleft, sym(n1), sym(n2), fld); :}
	;

NameTy ::=
	| COLON:col ID:n
		{: RESULT = new Absyn.NameTy(colleft, sym(n)); :}
	;












